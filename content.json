[{"title":"hazel具体实践遇到的一些小bug","date":"2023-10-25T06:59:59.000Z","path":"2023/10/25/Hazel_bug/bug/","text":"1.事件系统–未定义的标识符Hazel和sandBox预处理器设置错误。 2.日志系统错误 C2338 static_assert failed: ‘Cannot format an argument. To make type T formattable provide a formatter specialization: https://fmt.dev/latest/api.html#udt‘ Hazel C:\\Cpp_Dev\\Hazel\\Hazel\\vendor\\spdlog\\include\\spdlog\\fmt\\bundled\\core.h 1757 12HZ_CORE_TRACE(&quot;&#123;0&#125;&quot;, e.); =&gt; HZ_CORE_TRACE(&quot;&#123;0&#125;&quot;, e.ToString()); 3.GLFW这里的011的GLFW和现有库不同 会导致编译出错需要把GLFW的分支切到 git checkout -f b4b4319 这个是当时录制教程的一个中间commit然后把lua脚本中的systemversion改为latest然后premake 然后再编译 就可以避免LINK错误了","comments":true,"tags":[{"name":"Hazel_bug","slug":"Hazel-bug","permalink":"https://kettycode.github.io/tags/Hazel-bug/"}]},{"title":"无题","date":"2023-10-25T06:59:59.000Z","path":"2023/10/25/essay/2023-10-24/","text":"","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kettycode.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"位运算基础——不需要额外空间交换两个数","date":"2023-10-23T12:59:59.000Z","path":"2023/10/23/bitSum/交换两个数/","text":"不用额外空间交换两个数基础位运算1234&amp;----与|----或!----非^----异或 简单交换算法123456void Swap(int&amp; num1, int&amp; num2)&#123; num1 = num1 ^ num2; num2 = num1 ^ num2; //num2 = num1 ^ num2 ^ num2 = num1; num1 = num1 ^ num2; //num1 = num1 ^ num2 ^ num1 = num2;&#125;","comments":true,"tags":[{"name":"位运算","slug":"位运算","permalink":"https://kettycode.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"}]},{"title":"位运算基础——找出数组中唯一一个只有一个的数","date":"2023-10-23T12:59:59.000Z","path":"2023/10/23/bitSum/找出单身狗/","text":"简单模式：数组中只有一个数出现一次，其他均出现两次，请找出这个数。12345678//原理：a ^ a = 0 a ^ 0 = aint FindOnlySum(vector&lt;int&gt;&amp; nums)&#123; int result = 0; for(auto&amp; num : nums)&#123; result ^= num; &#125; return result;&#125; 进阶模式：数组中只有一个数出现一次，其他均出现三次，请找出这个数。(题目来自力扣137)例：【1，2，3，2，4，4，3，4，2，3】0001001000110010010001000011010000100011++++0364%%%%30001 1234567891011121314//int FindOnlySum(vector&lt;int&gt;&amp; nums)&#123; int ans = 0; for (int i = 0; i &lt; 32; ++i) &#123; int total = 0; for (int num: nums) &#123; total += ((num &gt;&gt; i) &amp; 1);//(num &gt;&gt; i) &amp; 1 -&gt; num左移i位，然后与1与 == 取num的第i位 &#125; if (total % 3) &#123; //total % 3 = 0 / 1 ans |= (1 &lt;&lt; i); // ans | (1 &lt;&lt; i) -&gt; 1右移i位，与ans或 == 将ans的第i位变成1 &#125; &#125; return ans;&#125; 算法改进第i位(ai,bi)初始(00)连续经过三个零或三个1又变回(00) (00)-&gt;(01)-&gt;(10)-&gt;(00) (ai,bi) xi 新(ai,bi) 00 0 00 00 1 01 01 0 01 01 1 10 10 0 10 10 1 00 a &#x3D; (~a &amp; b &amp; x) | (a &amp; ~b &amp; ~x)b &#x3D; ~a &amp; (b ^ x) 最后结果:ai&#x3D;0 ,bi&#x3D;0&#x2F;1,即返回b即可。 1234567int FindOnlySum(vector&lt;int&gt;&amp; nums) &#123; int a = 0, b = 0; for (int num: nums) &#123; tie(a, b) = pair&#123;(~a &amp; b &amp; num) | (a &amp; ~b &amp; ~num), ~a &amp; (b ^ num)&#125;; &#125; return b;&#125; 进一步改进–同时计算改为分步计算因为bi计算更简单，所以我们先计算bi,再用新bi计算ai。(00)-&gt;(01) &#x3D;&gt; (00)-&gt;(01)-&gt;(01) (ai,bi) xi 新bi 00 0 0 00 1 1 01 0 1 01 1 0 10 0 0 10 1 0 (新ai,bi) xi 新ai 00 0 0 01 1 0 01 0 0 00 1 1 10 0 1 10 1 0 b &#x3D; ~a &amp; (b ˆ x)a &#x3D; ~b &amp; (a ˆ x)​ 1234567891011class Solution &#123;public: int FindOnlySum(vector&lt;int&gt;&amp; nums) &#123; int a = 0, b = 0; for (int num: nums) &#123; b = ~a &amp; (b ^ num); a = ~b &amp; (a ^ num); &#125; return b; &#125;&#125;;","comments":true,"tags":[{"name":"位运算","slug":"位运算","permalink":"https://kettycode.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"}]},{"title":"vue学习之路--基础知识","date":"2023-10-23T12:59:59.000Z","path":"2023/10/23/vue/vue-based/","text":"组合式vue31.reative,ref1234567891011&lt;script setup&gt;import &#123; reactive, ref &#125; from &#x27;vue&#x27;const counter = reactive(&#123; count: 0 &#125;)//reactive()只适用于对象 (包括数组和内置类型，如 Map 和 Set)const message = ref(&#x27;Hello World!&#x27;)//ref()则可以接受任何值类型。ref 会返回一个包裹对象，并在 .value 属性下暴露内部值。&lt;/script&gt;&lt;template&gt; &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt; &lt;p&gt;Count is: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;&lt;/template&gt; 2.Attrictive绑定 v-bind:id &#x3D;&gt; :idv-bind:id&#x3D;”dynamicId” 可简写成 :id&#x3D;”dynamicId”123456789101112131415&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;const titleClass = ref(&#x27;title&#x27;)&lt;/script&gt;&lt;template&gt; &lt;h1 :class=&quot;titleClass&quot;&gt;Make me red&lt;/h1&gt;&lt;/template&gt;&lt;style&gt;.title &#123; color: red;&#125;&lt;/style&gt; 3.事件监听 v-on:click &#x3D;&gt; @clickv-on:click&#x3D;”increment”&gt; 简写成 @click&#x3D;”increment”&gt;12345678910111213&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;const count = ref(0)function increment() &#123; count.value++&#125;&lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;increment&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;&lt;/template&gt; 12345678910&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;const count = ref(0)&lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;count++&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;&lt;/template&gt; 4.表单绑定 v-bind:id &#x3D; “text” 和 v-on:input &#x3D; “onInput” &#x3D;&gt; v-model &#x3D; “text”v-bind 和 v-on 来在表单的输入元素上创建双向绑定,为了简化双向绑定，Vue 提供了一个 v-model 指令，它实际上是语法糖12345678&lt;input :value=&quot;text&quot; @input=&quot;onInput&quot;&gt;function onInput(e) &#123; // v-on 处理函数会接收原生 DOM 事件 // 作为其参数。 text.value = e.target.value&#125; 1&lt;input v-model=&quot;text&quot;&gt; 5.条件渲染 v-if和v-else12&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt; 123456789101112131415&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;const awesome = ref(true)function toggle() &#123; awesome.value = !awesome.value&#125;&lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;toggle&quot;&gt;toggle&lt;/button&gt; &lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt; &lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;&lt;/template&gt; 6.列表渲染 v-for12345&lt;ul&gt; &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt; &#123;&#123; todo.text &#125;&#125; &lt;/li&gt;&lt;/ul&gt; 12345678910111213141516171819202122232425262728293031323334353637&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;// 给每个 todo 对象一个唯一的 idlet id = 0const newTodo = ref(&#x27;&#x27;)const todos = ref([ &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;, &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;, &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;])function addTodo() &#123; todos.value.push(&#123; id: id++, text: newTodo.value &#125;) newTodo.value = &#x27;&#x27;&#125;function removeTodo(todo) &#123; todos.value = todos.value.filter((t) =&gt; t !== todo)&#125;&lt;/script&gt;&lt;template&gt; &lt;form @submit.prevent=&quot;addTodo&quot;&gt; &lt;input v-model=&quot;newTodo&quot;&gt; &lt;button&gt;Add Todo&lt;/button&gt; &lt;/form&gt; &lt;ul&gt; //使用了 filter 方法来过滤数组 todos.value 中的元素。 //通过匿名箭头函数 (t) =&gt; t !== todo，它保留了与 todo 不相等的元素，并返回一个过滤后的新数组。 &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt; &#123;&#123; todo.text &#125;&#125; &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt; 7.计算属性介绍一个新 API：computed()。它可以让我们创建一个计算属性 ref，这个 ref 会动态地根据其他响应式数据源来计算其 .value123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;script setup&gt;import &#123; ref, computed &#125; from &#x27;vue&#x27;let id = 0const newTodo = ref(&#x27;&#x27;)const hideCompleted = ref(false)const todos = ref([ &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;, &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;, &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;])const filteredTodos = computed(() =&gt; &#123; return hideCompleted.value ? todos.value.filter((t) =&gt; !t.done) : todos.value&#125;)function addTodo() &#123; todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;) newTodo.value = &#x27;&#x27;&#125;function removeTodo(todo) &#123; todos.value = todos.value.filter((t) =&gt; t !== todo)&#125;&lt;/script&gt;&lt;template&gt; &lt;form @submit.prevent=&quot;addTodo&quot;&gt; &lt;input v-model=&quot;newTodo&quot;&gt; &lt;button&gt;Add Todo&lt;/button&gt; &lt;/form&gt; &lt;ul&gt; &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt; &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt; &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt; &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt; &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125; &lt;/button&gt;&lt;/template&gt;&lt;style&gt;.done &#123; text-decoration: line-through;&#125;&lt;/style&gt;","comments":true,"tags":[{"name":"vue","slug":"vue","permalink":"https://kettycode.github.io/tags/vue/"}]},{"title":"vue学习之路--其他知识","date":"2023-10-23T12:59:59.000Z","path":"2023/10/23/vue/vue-learning/","text":"在script标签中写js代码，或者使用src引入js文件时，默认不能使用module形式，即不能使用import导入文件，但是我们可以再script标签上加上type&#x3D;module属性来改变方式。1234567//module.jsexport default function test()&#123; return &#x27;test&#x27;&#125;// index.jsimport test from &#x27;./module.js&#x27;;console.log(test()) 1234567891011// index.html&lt;body&gt; // 方法 1 ： 引入module.js，然后在script标签里面调用 &lt;script type=&quot;module&quot;&gt; import test from &#x27;./module.js&#x27;; console.log(test()) &lt;/script&gt; // 方法 2 ： 直接引入index.js，使用src引入 &lt;script type=&quot;module&quot; src=&quot;./index.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; 鼠标悬停效果12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div&gt; &lt;a href=&quot;https://vitejs.dev&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;HelloWorld msg=&quot;Hello&quot; /&gt;&lt;/template&gt;&lt;style scoped&gt;.logo &#123; height: 6em; padding: 1.5em; will-change: filter; transition: filter 300ms;&#125;//hover : 鼠标悬停效果.logo:hover &#123; filter: drop-shadow(0 0 2em #646cffaa);&#125;.logo.vue:hover &#123; filter: drop-shadow(0 0 2em #42b883aa);&#125;&lt;/style&gt;","comments":true,"tags":[{"name":"vue","slug":"vue","permalink":"https://kettycode.github.io/tags/vue/"}]},{"title":"如何使用 makedown 编写个人博客","date":"2023-10-06T06:59:59.000Z","path":"2023/10/06/blog/博客编写/","text":"1.标题1234567891011一级标题=======二级标题--------或者# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2.字体123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 3.一些特殊线123456789101112分割线**** * ******- - -----------删除线~~BAIDU.COM~~下划线&lt;u&gt;带下划线文本&lt;/u&gt; 4.脚注1234[^要注明的文本]如下：创建脚注格式类似这样 [^bilibili]。[^bilibili]: B站 创建脚注格式类似这样 ^bilibili。 5.列表12345678910111213141516171819202122* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项1. 第一项2. 第二项3. 第三项1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 6.区块12&gt;后加空格表示区块引用可与列表相互嵌套 7.代码12345678910如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：`printf()` 函数代码区块使用4个空格或者一个制表符（tab键），例如： &lt;c++ int main()&#123; return 0; &#125;也可以使用三个`包裹代码 &lt;c++ int main()&#123; return 0; &#125; 123int main()&#123; return 0;&#125; 8.链接12345678910111213141516171819[链接名称](链接地址)如：[bilibili](https://www.bilibili.com/)或者&lt;链接地址&gt;如：&lt;https://www.bilibili.com/&gt;高级链接:这个链接用 1 作为网址变量 [Google][1]这个链接用 bili 作为网址变量 [B站][bili]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [bili]: https://www.bilibili.com/这个链接用 1 作为网址变量 [Google][1]这个链接用 bili 作为网址变量 [B站][bili]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [bili]: https://www.bilibili.com/ 以下是高级链接生成的结果：这个链接用 1 作为网址变量 Google这个链接用 bili 作为网址变量 B站然后在文档的结尾为变量赋值（网址）1: http://www.google.com/bili: https://www.bilibili.com/ 这个链接用 1 作为网址变量 Google这个链接用 bili 作为网址变量 B站然后在文档的结尾为变量赋值（网址） 9.图片1234567891011![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png需要指定图片的高度与宽度，可以使用html里面的img标签：&lt;img decoding=&quot;async&quot; src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt; 10.表格123456789| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 || 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 11.其他12不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ， 参考资料：菜鸟教程https://www.runoob.com/markdown/md-tutorial.html","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"https://kettycode.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"github pages + Hexo建立一个自己的个人博客","date":"2023-10-06T06:59:59.000Z","path":"2023/10/06/blog/建立一个个人博客/","text":"主要步骤我推荐看这个视频: bilibili 基本没有什么问题，有问题也可以留言，我会尽量帮助解答。","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"https://kettycode.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Hello World","date":"2023-10-03T05:21:14.098Z","path":"2023/10/03/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[]}]